schema {
    query: Query
}

type ScenariosResult {
    success: Boolean!
    errors: [String]
    scenarios: [Scenario]
}

type ScenarioResult {
    success: Boolean!
    errors: [String]
    scenario: Scenario
}

type LocationsResult {
    success: Boolean!
    errors: [String]
    locations: [Location]
}

type LocationResult {
    success: Boolean!
    errors: [String]
    location: Location
}

type AgentsResult {
    success: Boolean!
    errors: [String]
    agents: [Agent]
}

type AgentResult {
    success: Boolean!
    errors: [String]
    agent: Agent
}

type ItemResult {
    success: Boolean!
    errors: [String]
    item: Item
}

type ItemsResult {
    success: Boolean!
    errors: [String]
    items: [Item]
}

type GoalResult {
    success: Boolean!
    errors: [String]
    goal: Goal
}

type PlannedActivityResult {
    success: Boolean!
    errors: [String]
    plannedActivity: PlannedActivity
}

type ConversationResult {
    success: Boolean!
    errors: [String]
    conversation: Conversation
}

type Scenario {
    _id: ID!
    name: String!
    description: String!
    currentDateTime: String!
    seed: String!
    imageFilename: String
    locations: [Location]
    agents: [Agent]
    outsideAgents: [Agent]
}

type Location {
    _id: ID!
    scenarioId: ID!
    parentLocationId: ID!
    name: String!
    description: String!
    imageFilename: String
    resizedImageFilename: String
    imageInteriorFilename: String
    resizedImageInteriorFilename: String
    agents: [Agent]
    allAgents: [Agent]
    locations: [Location]
    items: [Item]
}

type Agent {
    _id: ID!
    scenarioId: ID!
    locationId: ID
    name: String!
    age: Int
    gender: String!
    description: String!
    currentTime: Int
    status: String
    emoji: String
    agentDescription: AgentDescription
    inventory: Item
    goals: [Goal]
    plannedActivities: [PlannedActivity]
    conversations: [Conversation]
}

type AgentDescription {
    _id: ID!
    agentId: ID!
    portraitFilename: String
    iconFilename: String
    resizedIconFilename: String
    chibiFilename: String
    resizedChibiFilename: String
    hair: String
    eyes: String
    clothing: [String]
    distinguishingFeatures: [String]
}

type Item {
    _id: ID
    name: String
    description: String
    canInteract: Boolean
    canBePickedUp: Boolean
    locationId: ID
    usingCharacterId: ID
    status: String
    emoji: String
}

type Goal {
    _id: ID!
    agentId: ID!
    title: String
    timeFrame: String
    description: String
}

type PlannedActivity {
    _id: ID!
    agentId: ID!
    description: String
    timeFrame: String
    priority: Int
    day: String
    startDateTime: String
    endDateTime: String
}

type Conversation {
    _id: ID!
    initiatingAgent: ID!
    summary: String
    agents: [ID]
    dialogue: [Dialogue]
}

type Dialogue {
    agentName: String
    text: String
}

type Query {
    scenarios: ScenariosResult
    scenario(id: ID!): ScenarioResult
    locations(scenarioId: ID!, parentLocationId: ID): LocationsResult
    location(id: ID!): LocationResult
    agents(scenarioId: ID, locationId: ID): AgentsResult
    agent(id: ID!): AgentResult
    #TODO: items
    item(id: ID!): ItemResult
    #TODO: goals
    goal(id: ID!): GoalResult
    #TODO: plannedActivities
    plannedActivity(id: ID!): PlannedActivityResult
    #TODO: conversations
    conversation(id: ID!): ConversationResult
}